From 2afe1b6421118a3a00283b12dd7f9953e401ea6e Mon Sep 17 00:00:00 2001
From: Nehal J Wani <nehaljw.kkd1@gmail.com>
Date: Thu, 30 Jul 2020 19:27:29 -0400
Subject: [PATCH 2/2] google/gopacket/pcap: s/wpcap.dll/pcap.dll

---
 .../google/gopacket/pcap/pcap_windows.go      | 20 +++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/vendor/github.com/google/gopacket/pcap/pcap_windows.go b/vendor/github.com/google/gopacket/pcap/pcap_windows.go
index d8e86cd4..59183539 100644
--- a/vendor/github.com/google/gopacket/pcap/pcap_windows.go
+++ b/vendor/github.com/google/gopacket/pcap/pcap_windows.go
@@ -26,38 +26,38 @@ const npcapPath = "\\Npcap"
 func initDllPath(kernel32 syscall.Handle) {
 	setDllDirectory, err := syscall.GetProcAddress(kernel32, "SetDllDirectoryA")
 	if err != nil {
-		// we can't do anything since SetDllDirectoryA is missing - fall back to use first wpcap.dll we encounter
+		// we can't do anything since SetDllDirectoryA is missing - fall back to use first pcap.dll we encounter
 		return
 	}
 	getSystemDirectory, err := syscall.GetProcAddress(kernel32, "GetSystemDirectoryA")
 	if err != nil {
-		// we can't do anything since SetDllDirectoryA is missing - fall back to use first wpcap.dll we encounter
+		// we can't do anything since SetDllDirectoryA is missing - fall back to use first pcap.dll we encounter
 		return
 	}
 	buf := make([]byte, 4096)
 	r, _, _ := syscall.Syscall(getSystemDirectory, 2, uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)), 0)
 	if r == 0 || r > 4096-uintptr(len(npcapPath))-1 {
-		// we can't do anything since SetDllDirectoryA is missing - fall back to use first wpcap.dll we encounter
+		// we can't do anything since SetDllDirectoryA is missing - fall back to use first pcap.dll we encounter
 		return
 	}
 	copy(buf[r:], npcapPath)
 	_, _, _ = syscall.Syscall(setDllDirectory, 1, uintptr(unsafe.Pointer(&buf[0])), 0, 0)
-	// ignore errors here - we just fallback to load wpcap.dll from default locations
+	// ignore errors here - we just fallback to load pcap.dll from default locations
 }
 
-// loadedDllPath will hold the full pathname of the loaded wpcap.dll after init if possible
-var loadedDllPath = "wpcap.dll"
+// loadedDllPath will hold the full pathname of the loaded pcap.dll after init if possible
+var loadedDllPath = "pcap.dll"
 
 func initLoadedDllPath(kernel32 syscall.Handle) {
 	getModuleFileName, err := syscall.GetProcAddress(kernel32, "GetModuleFileNameA")
 	if err != nil {
-		// we can't get the filename of the loaded module in this case - just leave default of wpcap.dll
+		// we can't get the filename of the loaded module in this case - just leave default of pcap.dll
 		return
 	}
 	buf := make([]byte, 4096)
 	r, _, _ := syscall.Syscall(getModuleFileName, 3, uintptr(wpcapHandle), uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)))
 	if r == 0 {
-		// we can't get the filename of the loaded module in this case - just leave default of wpcap.dll
+		// we can't get the filename of the loaded module in this case - just leave default of pcap.dll
 		return
 	}
 	loadedDllPath = string(buf[:int(r)])
@@ -160,9 +160,9 @@ func init() {
 
 	initDllPath(kernel32)
 
-	wpcapHandle, err = syscall.LoadLibrary("wpcap.dll")
+	wpcapHandle, err = syscall.LoadLibrary("pcap.dll")
 	if err != nil {
-		panic("Couldn't load wpcap.dll")
+		panic("Couldn't load pcap.dll")
 	}
 	initLoadedDllPath(kernel32)
 	msvcrtHandle, err = syscall.LoadLibrary("msvcrt.dll")
-- 
2.23.0

